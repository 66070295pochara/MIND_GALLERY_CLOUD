<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Favorite Gallery - Mind Gallery</title>
  <link rel="stylesheet" href="/css/style.css"/>
  <link rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"/>
</head>
<body>
  <!-- inject user id (จาก EJS) -->
  <script>
    window.CURRENT_USER_ID =
      "<%= (typeof user !== 'undefined' && user && (user._id || user.id)) ? String(user._id || user.id) : '' %>";
  </script>

  <main>
    <aside class="left-sidebar">
      <img src="/img/logo.png" class="logo" alt="Mind Gallery" />
      <nav>
        <a href="/gallery/my"><i class="fas fa-home"></i><span>Own Gallery</span></a>
        <a href="/gallery/all"><i class="fas fa-globe"></i><span>All Gallery</span></a>
        <a href="/gallery/fav" class="active"><i class="fas fa-heart"></i><span>Favorite</span></a>
      </nav>
      <a href="#" class="logout" id="logoutBtn"><i class="fas fa-sign-out"></i><span>Logout</span></a>
    </aside>

    <section class="main-feed">
      <div class="gallery-container">
        <div class="profile-header">
          <img src="/img/logofavgal.png" class="headlogo" alt="Favorite Gallery Logo"/>
        </div>

        <div class="gallery-grid" id="grid">
          <p style="text-align:center; color:#777;">กำลังโหลด...</p>
        </div>

        <!-- Overlay -->
        <div class="overlay" id="overlay" aria-hidden="true">
          <div class="overlay-content">
            <div class="overlay-left">
              <img src="" alt="Preview" id="overlay-img"/>
            </div>
            <div class="overlay-right">
              <div class="overlay-info">
                <h3 id="overlay-username">@User</h3>
                <p class="description" id="overlay-desc"></p>
              </div>
              <div class="overlay-footer">
                <p id="overlay-likes">Like : 0</p>
                <a class="likebutt" id="like-button">
                  <i class="fas fa-heart"></i><span id="like-text">Like</span>
                </a>
              </div>

              <hr style="border-color:rgba(255,255,255,.1); margin:12px 0;">

              <!-- Comments -->
              <div class="overlay-comments" id="overlayComments">
                <h4>Comments</h4>
                <div id="commentList"></div>
                <form id="commentForm" style="margin-top:10px;">
                  <textarea id="commentInput" placeholder="Write a comment..." rows="2" required
                            style="width:100%; border-radius:8px; padding:8px;"></textarea>
                  <button id="postBTN" type="submit" class="btn" style="margin-top:6px;">Post</button>
                </form>
              </div>
              <!-- /Comments -->
            </div>
          </div>
        </div>
        <!-- /Overlay -->
      </div>
    </section>
  </main>

  <script>
    document.addEventListener("DOMContentLoaded", async () => {
      const grid           = document.getElementById('grid');
      const overlay        = document.getElementById('overlay');
      const overlayImg     = document.getElementById('overlay-img');
      const overlayUser    = document.getElementById('overlay-username');
      const overlayDesc    = document.getElementById('overlay-desc');
      const overlayLikes   = document.getElementById('overlay-likes');
      const likeButton     = document.getElementById('like-button');
      const likeIcon       = likeButton.querySelector('i');
      const likeText       = document.getElementById('like-text');
      const logoutBtn      = document.getElementById('logoutBtn');

      // Comments refs
      const commentList    = document.getElementById('commentList');
      const commentForm    = document.getElementById('commentForm');
      const commentInput   = document.getElementById('commentInput');

      let currentImageId = null;
      let currentImageOwner = '';
      let currentImageDesc  = '';

      /* ---------- Helpers ---------- */
      function escapeHtml(s) {
        return String(s ?? '')
          .replaceAll('&','&amp;').replaceAll('<','&lt;')
          .replaceAll('>','&gt;').replaceAll('"','&quot;')
          .replaceAll("'",'&#39;');
      }

      async function ensureCurrentUserId() {
        if (window.CURRENT_USER_ID) return window.CURRENT_USER_ID;
        try {
          const res = await fetch('/api/me', { credentials: 'include' });
          if (!res.ok) return '';
          const me = await res.json();
          window.CURRENT_USER_ID = me.userId || me._id || '';
          return window.CURRENT_USER_ID;
        } catch { return ''; }
      }

      function parseCommentKey(sk) {
        const s = String(sk || '');
        const parts = s.split('#');
        if (parts.length >= 3) return { ts: parts[1], commentId: parts[2] };
        const maybe = s.replace(/^COMMENT#/, '');
        const m = maybe.match(/^(\d{10,13})-(.+)$/);
        if (m) return { ts: m[1], commentId: maybe };
        return { ts: null, commentId: null };
      }

      /* ---------- Load favorite gallery ---------- */
      try {
        const res = await fetch('/api/gallery/liked', { credentials: 'include' });
        if (res.status === 401) { window.location.href = '/login'; return; }

        const data = await res.json();
        grid.innerHTML = '';

        if (!data.items || data.items.length === 0) {
          grid.innerHTML = `<p style="text-align:center;">ยังไม่มีรูปที่กดถูกใจ</p>`;
        } else {
          data.items.forEach(img => {
            const item = document.createElement('div');
            item.classList.add('gallery-item');
            const author = (img.authorName && String(img.authorName).trim()) || (img.ownerId || 'User');
            item.innerHTML = `
              <img
                src="${img.imageUrl || img.url}"
                alt="${escapeHtml(img.title || img.originalName || 'image')}"
                data-id="${img.imageId || img._id}"
                data-desc="${escapeHtml(img.description || '')}"
                data-author="${escapeHtml(author)}"
              />
            `;
            grid.appendChild(item);
          });
        }

        // เปิด overlay เมื่อคลิกรูป
        grid.addEventListener('click', async (e) => {
          const imgEl = e.target.closest('.gallery-item img');
          if (!imgEl) return;

          currentImageId   = imgEl.dataset.id;
          currentImageDesc = imgEl.dataset.desc || "ไม่มีคำอธิบาย";
          currentImageOwner= (imgEl.dataset.author || '').trim() || 'User';

          overlayImg.src          = imgEl.src;
          overlayDesc.textContent = currentImageDesc;
          overlayUser.textContent = '@' + currentImageOwner;
          overlay.classList.add('is-open');

          // โหลดสถานะ Like
                try {
          const likeRes = await fetch(`/api/gallery/${currentImageId}/likes`, { credentials: 'include' });
          const likeData = await likeRes.json();
          const count = likeData?.count ?? (likeData?.users?.length ?? 0);
          
          // ************************ แก้ไขที่นี่ ************************
          // ใช้ .innerHTML เพื่อแสดงผลไอคอน Font Awesome
          overlayLikes.innerHTML = `<i class="fas fa-heart"></i> : ${count}`; 
          // ************************************************************

          await ensureCurrentUserId();
          const liked = Array.isArray(likeData?.users) && window.CURRENT_USER_ID
              ? likeData.users.includes(window.CURRENT_USER_ID)
              : false;
          likeText.textContent = liked ? 'Unlike' : 'Like';
          likeIcon.classList.toggle('liked', !!liked);
      } catch (e) {
          console.error("Error fetching likes:", e);
      }
          // โหลดคอมเมนต์
          await ensureCurrentUserId();
          await loadComments(currentImageId);
        });

        // ปิด overlay
        overlay.addEventListener('click', (e) => {
          if (e.target === overlay) overlay.classList.remove('is-open');
        });

        // Toggle Like
        likeButton.addEventListener('click', async () => {
          if (!currentImageId) return;
          const res = await fetch(`/api/gallery/${currentImageId}/like`, {
            method: 'POST',
            credentials: 'include'
          });
          const result = await res.json().catch(()=> ({}));
          if (res.status === 401) { window.location.href = '/login'; return; }
          if (!res.ok || !result.ok) { alert(result.message || 'ไม่สามารถกดถูกใจได้'); return; }

          const liked = !!result.liked;
          likeText.textContent = liked ? 'Unlike' : 'Like';
          likeIcon.classList.toggle('liked', liked);
        });

        // Logout
        logoutBtn?.addEventListener('click', async (e) => {
          e.preventDefault();
          await fetch('/api/auth/logout', { method: 'POST', credentials: 'include' }).catch(()=>{});
          location.href = '/login';
        });

      } catch (err) {
        console.error(err);
        grid.innerHTML = `<p style="color:#ff5555; text-align:center;">โหลดรายการที่ถูกใจไม่สำเร็จ</p>`;
      }

      /* ---------- Comments ---------- */
      async function loadComments(imageId) {
        if (!commentList) return;
        commentList.innerHTML = '<p>Loading comments...</p>';
        try {
          const res = await fetch(`/api/images/${imageId}/comments`, { credentials: 'include' });
          if (res.status === 401) { commentList.innerHTML = '<p>Please login to view comments.</p>'; return; }
          if (!res.ok) { commentList.innerHTML = '<p>Fail to load comments.</p>'; return; }

          const comments = await res.json();
          if (!Array.isArray(comments) || !comments.length) {
            commentList.innerHTML = '<p>No comments yet.</p>';
            return;
          }

          await ensureCurrentUserId();
          commentList.innerHTML = comments.map(c => {
            const { ts, commentId } = parseCommentKey(c.SK);
            const ownerId   = String(c.authorId || c.userId || '');
            const displayNm = c.authorName || c.userName || ownerId || 'user';
            const isOwner   = ownerId && window.CURRENT_USER_ID && (ownerId === String(window.CURRENT_USER_ID));
            return `
              <div class="comment-item" data-id="${escapeHtml(commentId || '')}" data-ts="${escapeHtml(ts || '')}">
                <div class="comment-body">
                  <strong>@${escapeHtml(displayNm)}</strong>:
                  <span class="comment-text">${escapeHtml(c.text)}</span>
                </div>
                ${isOwner ? `
                <div class="comment-actions">
                  <button id="editcomment" class="btn btn-ghost btn-edit" data-action="edit">Edit</button>
                  <button id="deletecomment" class="btn btn-ghost btn-danger btn-delete" data-action="delete">Delete</button>
                </div>` : ``}
              </div>
            `;
          }).join('');
        } catch (e) {
          console.error(e);
          commentList.innerHTML = '<p>Fail to load comments.</p>';
        }
      }

      // Post Comment
      commentForm?.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!currentImageId) return;
        const text = commentInput.value.trim();
        if (!text) return;

        try {
          const res = await fetch(`/api/images/${currentImageId}/comments`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ text })
          });
          if (res.status === 401) { alert('Please login first.'); return; }
          if (!res.ok) { alert('Fail to post comment'); return; }
          commentInput.value = '';
          await loadComments(currentImageId);
        } catch (e) {
          console.error(e);
        }
      });

      // Edit / Delete
      commentList?.addEventListener('click', async (e) => {
        const btn = e.target.closest('button[data-action]');
        if (!btn) return;

        const row = btn.closest('.comment-item');
        const cid = row?.dataset.id;
        const ts  = row?.dataset.ts;
        if (!cid || !ts || !currentImageId) return;

        const action = btn.dataset.action;

        if (action === 'edit') {
          const textEl = row?.querySelector('.comment-text');
          const curr = textEl?.textContent || '';
          const next = prompt('Edit your comment:', curr);
          if (next == null) return;
          const newText = next.trim();
          if (!newText) { alert("Comment can't be empty"); return; }

          const res = await fetch(`/api/images/${currentImageId}/comments/${cid}?ts=${encodeURIComponent(ts)}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ text: newText })
          });
          if (res.status === 401) { alert('Please login first.'); return; }
          if (res.status === 403) { alert('You can only edit your own comment.'); return; }
          if (!res.ok) { alert('Fail to update'); return; }
          if (textEl) textEl.textContent = newText;
        }

        if (action === 'delete') {
          if (!confirm('Delete this comment?')) return;
          const res = await fetch(`/api/images/${currentImageId}/comments/${cid}?ts=${encodeURIComponent(ts)}`, {
            method: 'DELETE',
            credentials: 'include'
          });
          if (res.status === 401) { alert('Please login first.'); return; }
          if (res.status === 403) { alert('You can only delete your own comment.'); return; }
          if (!res.ok) { alert('Fail to delete'); return; }
          row?.remove();
        }
      });
    });
  </script>

  <style>
    .overlay-comments h4{ margin:6px 0 8px; }
    .comment-item{
      display:flex; align-items:center; gap:10px;
      padding:6px 10px; margin-bottom:8px;
      background:rgba(255,255,255,.06); border-radius:8px;
    }
    .comment-body{ flex:1; min-width:0; color:#ddd; }
    .comment-text{ white-space:pre-wrap; }
    .comment-actions{ margin-left:auto; display:flex; gap:8px; }
    .btn-danger{ background:#e03131; border:1px solid #c33; color:#fff;
      padding:4px 10px; border-radius:6px; cursor:pointer; }
    .btn-ghost{ background:transparent; color:#fff; border:1px solid #888;
      padding:4px 10px; border-radius:6px; cursor:pointer; }
    .btn-ghost:hover{ background:rgba(255,255,255,.1); }
    @media (max-width:520px){
      .comment-item{ flex-direction:column; align-items:flex-start; }
      .comment-actions{ margin-left:0; }
    }
  </style>
</body>
</html>
